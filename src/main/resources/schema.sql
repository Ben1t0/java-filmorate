CREATE TABLE IF NOT EXISTS mpaa_rates
(
    id          int generated by default as identity primary key,
    name        varchar(50)  not null unique,
    description varchar(200) not null
);


CREATE TABLE IF NOT EXISTS films
(
    id           int generated by default as identity primary key,
    name         varchar(255) not null,
    release_date date         not null,
    description  varchar(200) not null,
    duration     int          not null,
    mpaa_rate_id int          not null REFERENCES mpaa_rates (id) ON DELETE RESTRICT,
    CONSTRAINT check_positive_duration CHECK duration > 0,
    CONSTRAINT not_empty_descr CHECK description != '',
    CONSTRAINT not_empty_name CHECK name != '',
    CONSTRAINT check_release_date_after_1895_12_28 CHECK release_date >= PARSEDATETIME('1895-12-28', 'yyyy-MM-dd'),
    CONSTRAINT unique_name_and_release_date UNIQUE (name, release_date)
);

CREATE TABLE IF NOT EXISTS users
(
    id         int generated by default as identity primary key,
    login      varchar(100) not null,
    name       varchar(100),
    email      varchar(200) not null,
    birth_date date         not null,
    CONSTRAINT check_login_not_empty CHECK login NOT LIKE '% %' AND login != '',
    CONSTRAINT check_birth_date_in_past CHECK birth_date < CURRENT_DATE,
    CONSTRAINT unique_login UNIQUE (login),
    CONSTRAINT unique_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS likes
(
    user_id int REFERENCES users (id) ON DELETE CASCADE,
    film_id int REFERENCES films (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS friends
(
    user_id   int REFERENCES users (id) ON DELETE CASCADE,
    friend_id int REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT check_user_and_friend_not_same CHECK friends.user_id != friends.friend_id
);

CREATE TABLE IF NOT EXISTS genres
(
    id   int generated by default as identity primary key,
    name varchar(200) not null unique,
    CONSTRAINT check_name_not_empty CHECK name != ''
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id  int REFERENCES films (id) ON DELETE CASCADE,
    genre_id int REFERENCES genres (id) ON DELETE RESTRICT,
    PRIMARY KEY (film_id, genre_id)
);



